openapi: 3.0.3
info:
  title: TRACE Protocol API
  version: 0.1.0
  description: |
    **TRACE Protocol** — Trusted Record of Autonomous Computational Events.
    
    An open standard for recording, auditing, and governing autonomous computation through the **Action → Policy → Evidence** loop.
    
    ## Key Features
    
    - **Propose Actions** — Define autonomous intents that require oversight
    - **Enforce Policies** — Require approvals, validations, or constraints  
    - **Collect Evidence** — Log verifiable results and artifacts
    - **Audit Everything** — Build complete accountability trails
    
    ## SDKs Available
    
    - **Python**: `pip install traceprotocol` ([PyPI](https://pypi.org/project/traceprotocol/))
    - **TypeScript**: `npm install trace-protocol` ([npm](https://www.npmjs.com/package/trace-protocol))
    
    ## Learn More
    
    - [Website](https://traceprotocol.org)
    - [Documentation](https://traceprotocol.org/spec.html)
    - [GitHub Repository](https://github.com/trace-protocol/trace-protocol)
  contact:
    name: TRACE Protocol Support
    url: https://traceprotocol.org
    email: support@traceprotocol.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://traceprotocol.org/terms
servers:
  - url: http://localhost:8787
    description: Local reference server (development)
  - url: https://api.traceprotocol.org
    description: Production API server
paths:
  /health:
    get:
      summary: Health check
      description: |
        Check if the TRACE Protocol server is running and healthy.
        
        This endpoint is useful for monitoring and load balancer health checks.
      tags:
        - System
      responses:
        '200':
          description: Server is healthy and ready to process requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                    description: Always true when the server is healthy
              examples:
                healthy:
                  summary: Healthy server response
                  value:
                    ok: true

  /policy:
    get:
      summary: Get compiled policy
      description: |
        Retrieve the compiled policy rules that govern autonomous actions.
        
        ## What are Policies?
        
        Policies are the "rules engine" of TRACE Protocol. They define:
        - **What actions are allowed** - Which autonomous actions can be proposed
        - **What approvals are required** - Human oversight requirements before execution
        - **What evidence must be collected** - Proof of successful completion
        - **What constraints apply** - Limits, validations, and safety checks
        
        ## Policy Modes
        
        - **`enforce`** - Actions must be approved before execution (human-in-the-loop)
        - **`observe`** - Actions can execute immediately but are logged for review
        
        ## Usage Examples
        
        - Get all policies: `GET /policy`
        - Get email policies: `GET /policy?actionType=send_email`
        - Get deployment policies: `GET /policy?actionType=deploy_app`
      tags:
        - Policy
      parameters:
        - in: query
          name: actionType
          schema:
            type: string
          description: |
            Optional filter for a specific action type.
            
            Examples: "send_email", "create_pr", "deploy_app"
          example: "send_email"
      responses:
        '200':
          description: Compiled policy rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
              examples:
                email_policy:
                  summary: Email sending policy
                  value:
                    rules:
                      - actionType: "send_email"
                        requiresApproval: true
                        checks: ["reviewer_approval"]
                        evidence: ["email_sent"]

  /actions:
    post:
      summary: Register an action proposal
      description: |
        Propose an autonomous action for policy evaluation.
        
        ## What are Actions?
        
        Actions represent autonomous intents that require oversight. They contain:
        - **Type** - What kind of action (send_email, create_pr, deploy_app)
        - **Actor** - Who/what is performing the action (agent, user, system)
        - **Target** - What the action affects (email address, repository, server)
        - **Params** - Action-specific parameters and configuration
        
        ## The TRACE Loop
        
        This is **Step 1** of the Action → Policy → Evidence loop:
        1. **Propose** - Submit action for policy evaluation (this endpoint)
        2. **Evaluate** - Server checks against policies and returns decision
        3. **Execute** - If approved, perform the action
        4. **Evidence** - Record proof of completion and results
        
        ## Decision Responses
        
        - **`approved`** - Action can execute immediately
        - **`requires_approval`** - Human approval needed before execution
        - **`rejected`** - Action violates policy and cannot proceed
        
        ## Common Action Types
        
        - `send_email` - Send an email message
        - `create_pr` - Create a pull request
        - `deploy_app` - Deploy an application
        - `update_database` - Modify database records
        - `send_notification` - Send user notifications
        
        **Actor Types:**
        - `human` - Human user
        - `agent` - AI agent or bot
        - `system` - Automated system process
      tags:
        - Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
            examples:
              send_email:
                summary: Send email action
                value:
                  id: "action_123"
                  timestamp: "2024-01-15T10:30:00Z"
                  type: "send_email"
                  actor:
                    kind: "agent"
                    name: "mail-bot"
                    provider: "openai"
                  target: "mailto:sarah@acme.com"
                  params:
                    subject: "Project Update"
                    body: "Here's the latest progress on our project."
              create_pr:
                summary: Create pull request action
                value:
                  id: "action_456"
                  timestamp: "2024-01-15T11:00:00Z"
                  type: "create_pr"
                  actor:
                    kind: "agent"
                    name: "code-reviewer"
                  target: "github://acme/repo#123"
                  params:
                    title: "Fix authentication bug"
                    description: "Resolves issue with user login"
      responses:
        '200':
          description: Decision for the proposed action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decision'
              examples:
                approved:
                  summary: Approved action
                  value:
                    actionId: "action_123"
                    status: "approved"
                requires_approval:
                  summary: Action requiring approval
                  value:
                    actionId: "action_456"
                    status: "requires_approval"
                    checks: ["reviewer_approval"]

  /evidence:
    post:
      summary: Submit evidence for an action
      description: |
        Submit evidence that an action was completed successfully or failed.
        
        ## What is Evidence?
        
        Evidence provides verifiable proof of action outcomes. It's the **final step** in the Action → Policy → Evidence loop, creating an immutable audit trail.
        
        ## Evidence Components
        
        - **Action ID** - Links evidence to the specific action
        - **Checks** - Individual verification items (approvals, validations, confirmations)
        - **Timestamp** - When the evidence was recorded
        - **Metadata** - Additional context, notes, or artifacts
        
        ## Evidence Types
        
        - **Success Evidence** - Proof that the action completed successfully
          - Email sent with message ID
          - PR created with URL
          - Database updated with record count
          - Deployment completed with version hash
        
        - **Failure Evidence** - Documentation of why the action failed
          - Error messages and stack traces
          - Validation failures and reasons
          - Timeout or resource issues
          - Policy violations and details
        
        ## Use Cases
        
        - **Compliance** - Meet regulatory requirements for AI actions
        - **Debugging** - Understand why actions succeeded or failed
        - **Auditing** - Provide complete accountability trails
        - **Learning** - Improve future action success rates
        
        **Common Evidence Names:**
        - `email_sent` - Email was successfully delivered
        - `pr_created` - Pull request was created
        - `reviewer_approval` - Human reviewer approved the action
        - `system_check` - Automated system validation passed
      tags:
        - Evidence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evidence'
            examples:
              email_success:
                summary: Email sent successfully
                value:
                  actionId: "action_123"
                  checks:
                    - name: "email_sent"
                      pass: true
                      note: "Message delivered to sarah@acme.com"
                      metadata:
                        messageId: "msg_456"
                        deliveryTime: "2024-01-15T10:31:00Z"
              pr_approval:
                summary: Pull request approved
                value:
                  actionId: "action_456"
                  checks:
                    - name: "reviewer_approval"
                      pass: true
                      approver: "@admin"
                      note: "Code looks good, approved for merge"
              action_failed:
                summary: Action failed
                value:
                  actionId: "action_789"
                  checks:
                    - name: "deployment_failed"
                      pass: false
                      note: "Database connection timeout"
                      error: "ConnectionError: timeout after 30s"
      responses:
        '200':
          description: Evidence accepted and verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                    description: Whether all evidence checks passed
                    example: true
              examples:
                verified:
                  summary: Evidence verified
                  value:
                    verified: true
                failed:
                  summary: Evidence verification failed
                  value:
                    verified: false

  /approve/{actionId}:
    post:
      summary: (Dev) Simulate human approval for an action
      parameters:
        - in: path
          name: actionId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Approved
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true

tags:
  - name: System
    description: System health and status endpoints
  - name: Policy
    description: Policy management and retrieval
  - name: Actions
    description: Action proposal and management
  - name: Evidence
    description: Evidence submission and verification
  - name: Development
    description: Development and testing utilities

components:
  schemas:
    Actor:
      type: object
      required: [kind, name]
      additionalProperties: false
      properties:
        kind:
          type: string
          enum: [human, agent, system]
        name:
          type: string
        provider:
          type: string
          description: Optional provider (openai, anthropic, internal, etc.)

    Action:
      type: object
      required: [id, type, actor, timestamp]
      additionalProperties: false
      properties:
        id:
          type: string
        type:
          type: string
        actor:
          $ref: '#/components/schemas/Actor'
        target:
          type: string
          description: Resource being acted on (mailto:…, github://org/repo#PR, notion://page/…).
        params:
          type: object
          additionalProperties: true
          description: Action inputs (opaque to the protocol).
        timestamp:
          type: string
          format: date-time
          description: ISO-8601 time when the action was proposed.

    Policy:
      type: object
      required: [rules]
      additionalProperties: false
      properties:
        rules:
          type: array
          items:
            type: object
            additionalProperties: false
            required: [when, mode]
            properties:
              id:
                type: string
                description: Optional rule identifier.
              when:
                type: object
                additionalProperties: false
                properties:
                  actionType:
                    type: string
                  actorKind:
                    type: string
                    enum: [human, agent, system]
                  actorName:
                    type: string
                  provider:
                    type: string
              mode:
                type: string
                enum: [observe, enforce]
                description: observe = log only; enforce = may require approval/evidence.
              require:
                type: array
                items:
                  type: string
              note:
                type: string
                description: Human-readable description of rule purpose.

    Decision:
      type: object
      required: [actionId, status]
      additionalProperties: false
      properties:
        actionId:
          type: string
        status:
          type: string
          enum: [allowed, requires_approval, recorded]
        checks:
          type: array
          items:
            type: string

    Evidence:
      type: object
      required: [actionId, checks]
      additionalProperties: false
      properties:
        actionId:
          type: string
        checks:
          type: array
          minItems: 1
          items:
            type: object
            additionalProperties: false
            required: [name, pass]
            properties:
              name:
                type: string
              pass:
                type: boolean
              approver:
                type: string
              note:
                type: string
        timestamp:
          type: string
          format: date-time
        signed:
          type: boolean
          description: Reserved for v0.3 (signature envelope).
        hash:
          type: string
          description: Optional content hash for integrity (e.g., SHA-256).
