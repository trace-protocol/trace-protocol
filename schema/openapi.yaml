openapi: 3.0.3
info:
  title: TRACE Protocol API
  version: 0.1.0
  description: |
    TRACE — Trusted Record of Autonomous Computational Events.
    Minimal API for the Action → Policy → Evidence loop.
servers:
  - url: http://localhost:8787
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
  /policy:
    get:
      summary: Get compiled policy
      parameters:
        - in: query
          name: actionType
          schema: { type: string }
          description: Optional filter for a specific action type.
      responses:
        '200':
          description: Compiled policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
  /actions:
    post:
      summary: Register an action proposal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        '200':
          description: Decision for the proposed action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decision'
  /evidence:
    post:
      summary: Submit evidence for an action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evidence'
      responses:
        '200':
          description: Evidence accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified: { type: boolean }
components:
  schemas:
    Actor:
      type: object
      required: [kind, name]
      properties:
        kind: { type: string, enum: [human, agent, system] }
        name: { type: string }
        provider: { type: string }
    Action:
      type: object
      required: [id, type, actor, timestamp]
      properties:
        id: { type: string }
        type: { type: string }
        actor: { $ref: '#/components/schemas/Actor' }
        target: { type: string }
        params: { type: object, additionalProperties: true }
        timestamp: { type: string, format: date-time }
    Policy:
      type: object
      properties:
        rules:
          type: array
          items:
            type: object
            required: [when, require, mode]
            properties:
              when:
                type: object
                properties:
                  actionType: { type: string }
                additionalProperties: true
              require:
                type: array
                items: { type: string }
              mode:
                type: string
                enum: [observe, enforce]
            additionalProperties: false
    Decision:
      type: object
      required: [actionId, status]
      properties:
        actionId: { type: string }
        status: { type: string, enum: [allowed, requires_approval, recorded] }
        checks:
          type: array
          items: { type: string }
    Evidence:
      type: object
      required: [actionId, checks]
      properties:
        actionId: { type: string }
        checks:
          type: array
          items:
            type: object
            required: [name, pass]
            properties:
              name: { type: string }
              pass: { type: boolean }
              approver: { type: string }
              note: { type: string }
        timestamp: { type: string, format: date-time }
        signed: { type: boolean }
        hash: { type: string }
